# This workflow will do a clean install of node dependencies,
# build the source code and run tests across different versions of node
# For more information see:
#
# https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: dev Release

on:
  push:
    paths:
      - '.github/**'
      - '.changeset/**'
      - 'packages/**'
    branches:
      - develop

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Get Yarn cache path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Checkout Repo
        uses: actions/checkout@master
        with:
          # This makes Actions fetch all Git history
          # so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: 18
          registry-url: https://registry.npmjs.org

      - name: Load Yarn cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-engines

      - name: Lint
        # Why do we add the "--no-error-on-unmatched-pattern" flag on this command?
        # The reason is that eslint may not locate the built files in  Windows CI environment
        # We therefore silently fail the command in this scenario.
        run: yarn lint --no-error-on-unmatched-pattern

      - name: Test
        run: NODE_ENV=staging yarn jest --verbose --ci --coverage --maxWorkers=2

      - name: Build
        run: yarn build

      # TODO: Uncomment when ready to start testing RCs

      - name: Setup CI Git User
        run: |
          git config --global user.name "lilemw"
          git config --global user.email "lile@mirrorworld.fun"

      - name: Configure npm
        run: |
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
          cat .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Sleep for 60 seconds
        run: sleep 60s
        shell: bash

      - name: Create Release Pull Request
        uses: changesets/action@v1
        with:
          publish: yarn changeset publish
          title: 'chore(release): version packages and publish'
          commit: 'chore(release): version packages'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create @dev release
        if: steps.changesets.outputs.published != 'true'
        run: |
          git checkout develop
          yarn changeset pre exit
          yarn changeset version --snapshot dev
          yarn changeset publish --tag dev
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
